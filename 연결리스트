//연결리스트는 데이터와 링크로 구성되어 있고 링크가 데이터를 연결하는 역할을 한다.
//연결된 표현은 리스트 구현에만 사용하는 것이 아니고 다른 여러가지
//동적자료구조를 구현하는데 많이 사용된다.
//데이터들의 순서를 유지하기 위해서 앞의 데이터는 뒤의 데이터를
//가리키는 줄을 가진다. 앞의 데이터에서 다음 데이터를 찾아가려면
//앞의 데이터의 줄을 따라가면 된다. 이런식으로 물리적으로 흩어져 있는
//자료들을 서로 연결해서 하나로 묶는 방법을 연결 리스트라고 한다.

//연결리스트의 장점
//1. 포인터를 사용하면 하나의 자료에서 다음 자료를 쉽게 가리킬 수 있고,
//새로운 노드를 삽입할 때도 앞 뒤에 있는 데이터의 이동없이 연결된 줄만 변경해주면 된다.
//2. 데이터를 저장할 공간이  필요할 때마다 동적으로 공간을 만들어서
//쉽게 추가할 수 있다는 것이다. 이것은 배열에 비해 상당한 장점이다.

//단점 : 배열에 비해 상대적으로 구현이 어렵고 오류발생률이 높다.

//하나의 프로그램 안에는 동시에 여러개의 연결리스트가 존재할 수 있다.
//이럴 경우, 연결 리스트들을 구별하는 것은 맨 첫번째 데이터이다.
//첫번째 데이터만 알 수 있으면 연결리스트의 나머지 데이터들은
//줄만 따라가면 얻을 수 있을 것이다.

//연결 리스트의 구조
//연결 리스트는 노드의 집합이며 이들은 데이터를 저장하고 있고 서로 연결되어 있다.
//노드들은 메모리의 어떤 위치에나 있을 수 있고 다른 노드로 가기 위해서는 현재
//노드가 가지고 있는 포인터를 이용하면 된다.
//데이터필드와 링크필드로 구성되어있다.
//데이터필드에는 우리가 저장하고 싶은 데이터가 들어간다.
//정수가 될 수도 있고, 구조체와 같이 복잡한 데이터가 될 수도 있다.
//링크 필드에는 다른 노드들을 가리키는 포인터가 저장된다. 이 포인터를 이용하여
//다음 노드로 건너갈 수 있다.
//연결리스트마다 첫번째 노드를 가리키고 있는 변수가 필요한데 이것을 헤드포인터라고 한다.
//연결리스트의 마지막 노드의 링크필드는 NULL로 설정되는데 더이상 연결된 노드가 없다는 것을 의미한다.

//연결리스트를 사용하면 연속적인 기억공간이 없어도 데이터를 저장하는 것이 가능하고
//미리 기억 공간을 확보할 필요도 없다.
//필요할 때마다 노드를 동적으로 생성하여 연결하면 된다.
//그러나, 링크 필드를 위한 추가 공간이 필요하게 되고 연산의 구현이나 사용방법이 복잡해진다.
//그래서 오류 발생 가능성이 많아진다.


//단순 연결리스트의 구현
//typedef int element;
//typedef struct ListNode {
//	element data;
//	struct ListNode* link;
//}ListNode;

//자기 참조 구조체(self-referential structure)
//구성 멤버 중에 같은 타입의 구조체를 가리키는 포인터가 존재하는 구조체

//노드의 생성
//ListNode* p1;
//p1 = (ListNode *)malloc(sizeof(ListNode));

//데이터 필드와 링크 필드 설정
//p1->data = 10;
//p1->link = NULL;

//두번째 노드 생성과 첫번째 노드와의 연결
//ListNode* p2;
//p2 = (ListNode *)malloc(sizeof(ListNode));
//p2->data = 20;
//p2->link = NULL;
//p1->link = p2;

//*중요* 헤드포인터(head pointer) : 연결 리스트의 맨 처음 노드를 가리키는 포인터

//phead : 리스트의 헤드 포인터의 포인터
//p : 선행 노드
//new_node : 삽입될 노드
void insert_node(ListNode** phead, ListNode* p, ListNode* new_node) {
	if (*phead == NULL) {//공백리스트인 경우
		new_node->link = NULL;
		*phead = new_node;
	}
	else if (p == NULL) {//p가 NULL이면 첫번째 노드로 삽입
		new_node->link = *phead;
		*phead = new_node;
	}
	else {//p다음에 삽입
		new_node->link = p->link;
		p->link = new_node;
	}
}

//phead : 헤드 포인터에 대한 포인터
//p : 삭제될 노드의 선행 노드
//removed : 삭제될 노드
void remove_node(ListNode** phead, ListNode* p, ListNode* removed) {
	if (p == NULL) {
		*phead = (*phead)->link;
	}
	else
		p->link = removed->link;
	free(removed);
}

//방문연산 : 리스트 상의 노드를 순차적으로 방문
//1. 반복 버전
void display(ListNode* head) {
	ListNode* p = head;
	while (p != NULL) {
		printf("%d->", p->data);
		p = p->link;
	}
	printf("\n");
}
//2. 순환버전
void display_recur(ListNode* head) {
	ListNode* p = head;
	if (p != NULL) {
		printf("%d->", p->data);
		display_recur(p->link);
	}
}

//탐색 연산 : 특정한 데이터값을 갖는 노드를 찾는 연산
ListNode* search(ListNode* head, int x) {
	ListNode* p;
	p = head;
	while (p != NULL) {
		if (p->data == x) {
			return p; //탐색 성공
		}
		p = p->link;
	}
	return p; //탐색 실패일 경우 NULL반환
}

//합병 연산 : 2개의 리스트를 합하는 연산
ListNode* concat(ListNode* head1, ListNode* head2) {
	ListNode* p;
	if (head1 == NULL) return head2;
	else if (head2 == NULL) return head1;
	else {
		p = head1;
		while (p->link != NULL)
			p = p->link;
		p->link = head2;
		return head1;
	}
}
