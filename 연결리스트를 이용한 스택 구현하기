//연결리스트를 이용한  스택 구현하기
//크기가 제한되지 않는 장점이 있지만, 동적메모리 할당 해제를 통해 스택에
//새로운 요소를 삽입, 삭제 하기 때문에 삽입이나 삭제 시간은 좀 더 걸린다.
//top는 노드를 가리키는 포인터로 선언된다
//일관성을 위해 구조체 타입으로 정의되어있다.
//모든 함수들은 이 구조체의 포인터를 매개변수로 받아서 사용한다.

//삽입 : 개념적으로 단순 연결리스트에서 맨 앞에 데이터를 삽입하는 것과 동일하다.
//연결된 스택에서 헤드포인터가 top라는 것 외에 별 차이점이 없다.
//먼저 동적메모리 할당으로 노드를 생성 후 첫번째 노드로 삽입

//삭제 : top의 값을 top->link로 바꾸고 기존의 top이 가리키는 노드를
//동적메모리 해제하면 된다.

//공백 상태 : 연결리스트와 마찬가지로 top의 포인터가 NULL인 경우이다.
//포화 상태 : 동적메모리 할당만 된다면 노드를 생성할 수 있기 때문에 필요없음.
//#include <stdio.h>
//
//typedef int element;
//typedef struct StackNode {//노드의 타입
//	element item;
//	struct StackNode* link;
//}StackNode;
//typedef struct {//연결된 스택 관련 데이터
//	StackNode* top;
//}LinkedStackType;

//삽입 함수
//void push(LinkedStackType* s, element item) {
//	StackNode* temp = (StackNode*)malloc(sizeof(StackNode));
//	if (temp == NULL) {
//		fprintf(stderr, "메모리 할당에러\n");
//		return;
//	}
//	else {
//		temp->item = item;
//		temp->link = s->top;
//		s->top = temp;
//	}
//}

//삭제 함수
//element pop(LinkedStackType* s) {
//	if (is_empty(s)) {
//		fprinitf(stderr, "스택이 비어있음\n");
//		exit(1);
//	}
//	else {
//		StackNode* temp = ->s->top;
//		int item = temp->item;
//		s->top = s->top->link;
//		free(temp);
//		return item;
//	}
//}

//먼저 문자열에 있는 괄호를 차례대로 조사하면서 왼쪽 괄호를 만나면 스택에 
//삽입하고, 오른쪽 괄호를 만나면 스택에서 맨 위의 괄호를 꺼낸 후 짝이 맞는지
//검사한다. 마지막 괄호까지 조사한 후에도 스택에 괄호가 남아있으면 오류.
//그렇지 않으면 성공
//int main() {
//	if (check_matching("{ A[(i+1)]=0}") == TRUE)
//		printf("괄호검사 성공\n");
//	else
//		printf("괄호검사 실패\n");
//}
