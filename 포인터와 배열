//포인터와 배열
//배열과 포인터는 아주 밀접한 관계를 가지고 있다.
//배열 이름이 바로 포인터이다.
//포인터는 배열처럼 사용이 가능하다.
//포인터와 배열의 관계
#include <stdio.h>
#pragma warning(disable : 4996)

int main() {
	int a[] = { 10,20,30,40,50 };
	printf("%a[0] = %u\n", &a[0]);
	printf("%a[1] = %u\n", &a[1]);
	printf("%a[2] = %u\n", &a[2]);
	printf("a = %u\n", a);
	printf("a+1 = %u\n", a + 1);
	printf("a+2 = %u\n", a + 2);

	printf("*a = %d\n", *a);//a가 가리키는 곳의 값
	printf("*(a+1) = %d\n", * (a + 1));//(a+1)이 가리키는 곳의 값
	printf("*(a+1) = %d\n", * (a + 2));//(a+2)이 가리키는 곳의 값
	return 0;
}

//포인터는 배열처럼 사용할 수 있다.
//인덱스 표기법을 포인터에 사용할 수 있다. 
#include <stdio.h>
int main() {
	int a[] = { 10,20,30,40,50 };
	int* p;

	p = a;
	printf("a[0]=%d a[1]=%d a[2]=%d \n", a[0], a[1], a[2]);
	printf("p[0]=%d p[1]=%d p[2]=%d \n\n", p[0], p[1], p[2]);
	return 0;
}

//배열 매개 변수
//1. 일반 매개 변수
void sub(int x) //매개 변수 x에 기억 장소가 할당
{...}

//2.배열 매개 변수
void sub(int b[]) //b에 기억 장소가 할당되지 않는다.
{...}

//Why ? -> 배열을 함수로 복사하려면 많은 시간 소모
//그래서 배열 매개 변수는 포인터로 생각 할 수 있다.

#include <stdio.h>
void sub(int b[], int n); //프로토타입
int main() {
	int a[3] = { 1,2,3 };
	printf("%d %d %d\n", a[0], a[1], a[2]);
	sub(a, 3); //함수호출
	printf("%d %d %d\n", a[0], a[1], a[2]);
	return 0;
}
void sub(int b[], int n) //(==void sub(int *b, int n))배열의 이름과 포인터는 근본적으로 같다.
{
	b[0] = 4; //인덱스 표기법을 사용해서 배열에 접근
	b[1] = 5;
	b[2] = 6;
}


//포인터를 사용한 방법의 장점
//포인터가 인덱스 표기법보다 빠르다. Why ? : 인덱스를 주소로 변환 할 필요가 없다.

//1. 인덱스 표기법 사용
int get_sum(int a[], int n) {
	int i;
	int sum = 0;

	for (i = 0; i < n; i++) {
		sum += a[i];
	}
	return sum;
}
//2. 포인터 사용
int get_sum(int a[], int n) {
	int i, sum = 0;
	int* p;
	p = a;

	for (i = 0; i < n; i++) {
		sum += *p++;
	}
	return sum;
}


//포인터 배열(array of pointers) : 포인터를 모아서 배열로 만든 것
int* ap[10];
//ap[10] : []연산자가 * 연산자보다 우선순위가 높으므로, ap는 먼저 배열이 된다.
//int * ap[10] : 어떤 배열이냐 하면 int *(포인터)들의 배열이 된다.

//정수형 포인터 배열
int a = 10, b = 20, c = 30, d = 40, e = 50;
int* pa[5] = { &a, &b, &c, &d, &e };


//2차원 배열에 문자열을 저장
char fruits[4][10] = {
	"apple",
	"blueberry",
	"orange",
	"melon"
};

//문자열 포인터 배열
#include <stdio.h>
int main() {
	int i, n;

	char* fruits[] = {
		"apple",
		"blueberry",
		"orange",
		"melon"
	};

	n = sizeof(fruits) / sizeof(fruits[0]);
	for (i = 0; i < n; i++) {
		printf("%s \n", fruits[i]);
	}
	return 0;
}

//다차원 배열과 포인터
//2차원 배열 int m[3][3]
//1행->2행->3행...순으로 메모리에 저장(행우선 방법)
//포인터를 이용한 배열 원소 방문
//행의 평균을 구하는 경우
#include <stdio.h>
#define COLS 3
#define ROWS 4
double get_row_avg(int m[][COLS], int r);
double get_total_avg(int m[][COLS]);
int main() {
	int m[4][3] = { {1,2,3},{4,5,6},{7,8,9},{10,11,12} };
	double avg;
	avg = get_row_avg(m, 2);
	printf("평균은 %.1lf입니다.\n", avg);
	return 0;
}
double get_row_avg(int m[][COLS], int r) {
	int* p, * endp;
	double sum = 0.0;

	p = &m[r][0];
	endp = &m[r][COLS];

	printf("	p : %8d\n", *p);
	printf("	endp : %8d\n", *endp);

	while (p < endp)
		sum += *p++;

	sum /= COLS;
	return sum;
}

//전체 원소의 평균을 구하는 경우
double get_total_avg(int m[][COLS]) {
	int* p, * endp;
	double sum = 0.0;

	p = &m[0][0];
	endp = &m[ROWS - 1][COLS - 1];

	printf("	p : %8d\n", *p);
	printf("	endp : %8d\n", *endp);

	while (p <= endp)
		sum += *p++;

	sum /= ROWS * COLS;
	return sum;
}
