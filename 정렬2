//4. 셸 정렬(shell sort) : 삽입정렬이 어느정도 정렬된 배열에 대해서는 대한이 빠른것에 착안한 방법이다.
//셸 정렬은 삽입정렬보다 빠르다.
//삽입정렬의 최대 문제점은 요소들이 삽입될 때, 이웃한 위치로 이동한다는 것이다.
//만약 삽입되어야 할 위치가 현재 위치에서 상당히 멀리 떨어진 곳이라면 많은 이동을 해야만 제자리로 갈 수 있다.
//셸 정렬은 전체 리스트를 한번에 정렬하지 않았다.

//부분 리스트를 구성할 때는 주어진 리스트의 각k번째 요소를 추출하여 만든다.
//이를 간격(gab)이라고 한다. 셸 정렬에서는 각 스텝마다 간격을 줄여가므로 수행 과정이 반복될 때마다 하나의 부분
//리스트에 속하는 레코드들의 갯수는 증가된다. 마지막 스탭에서는 간격의 값이 1이 된다.

//셸의 구현
//간격은 처음에는 n/2로 하고 각 패스마다 간격을 절반으로 줄이는 방식을 사용한다.
//shell_sort함수는 gab이 1이 될때까지 gab을 1/2로 줄이면서 반복한다.
//만약 간격이 짝수면 1을 더하는 것이 좋은 것으로 분석되었다. 

//셸 정렬의 2가지 장점
//1. 연속적이지 않은 부분 리스트에서 자료의 교환이 일어나면 더 큰 거리를 이동한다.
//반면 삽입 정렬에서는 한번에 한칸씩만 이동된다.
//따라서 교환되는 요소들이 삽입 정렬보다는 최종 위치에 더 가까이 있는 가능성이 높아진다.
//2. 부분리스트는 어느정도 정렬이 된 상태이기 때문에 부분리스트의 개수가 1이 되게 되면
//셸 정렬은 기본적으로 삽입정렬을 수행하는 것이지만 더욱 빠르게 수행된다. 이것은 삽입 정렬이 거의
//정렬된 파일에 대해서는 빠르게 수행되기 때문이다.

//gab 만큼 떨어진 요소들을 삽입 정렬
//정렬의 범위는 first에서 last
inc_insertion_sort(int list[], int first, int last, int gap) {
//	int i, j, key;
//	for (i = first + gap; i <= last; i = i + gap) {
//		key = list[i];
//		for (i = i - gap; j >= first && key < list[j]; j = j - gap) {
//			list[j + gap] = list[j];
//		}
//		list[j + gap] = key;
//	}
//}
//void shell_sort(int list[], int n) //n = size
//{
//	int i, gap;
//	for (gap = n / 2; gap > 0; gap = gap / 2) {
//		if ((gap % 2) == 0)
//			gap++;
//		for (i = 0; i < gap; i++)	//부분 리스트의 개수는 gap
//			inc_insertion_sort(list, i, n - 1, gap);
//	}
//}

//합병정렬(merge sort) : 하나의 리스트를 두개의 균등한 크기고 분할하고 분할된 부분 리스트를
//정렬한 다음, 두개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법이다.
//분할정복(divide and conquer)
//문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 결과를 모아서 원래의 문제를
//해결하는 전략이다. 분리된 문제가 아직도 해결하기 어렵다면, 즉 충분히 작지 않다면
//분할 정복 방법을 연속하여 다시 적용한다. 분할 정복 방법은 대게 순환호출을 이용하여 구현된다.

//합병정렬의 단계
//1. 분할(divide) : 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.
//2. 정복(conquer) : 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면
//순환호출을 이용하여 다시 분할 정복 방법을 적용한다.
//3. 결합(combine) : 정렬된 부분 배열들을 하나의 배열에 합병한다.

//알고리즘
//1. 만약 나누어진 구간의 크기가 1이상이면
//2. 중간 위치를 계산한다.
//3. 앞쪽 부분 배열을 정렬하기 위하여 merge_sort함수를 순환 호출한다.
//4. 뒤쪽 부분 배열을 정렬하기 위하여 merge_sort함수를 순환 호출한다.
//5. 정렬된 2개의 부분 배열을 통합하기 위하여 하나의 정렬된 배열로 만든다.

/*int sorted[MAX_SIZE];*/ //추가 공간이 필요

//i는 정렬된 왼쪽리스트에 대한 인덱스
//j는 정렬된 오른쪽리스트에 대한 인덱스
//k는 정렬된 리스트에 대한 인덱스
//void merge(int list[], int left, int mid, int right) {
//	int i, j, k, l;
//	i = left;
//	j = mid;
//	k = left;
//
//	//분할 정렬된 list의 합병
//	while (i <= mid && i <= right) {
//		if (list[i] <= list[j])
//			sorted[k++] = list[i++];
//		else
//			sorted[k++] = list[j++];
//	}
//	if (i > mid) //남아있는 레코드의 일괄 복사
//		for (i = j; i <= right; i++)
//			sorted[k++] = list[i];
//	else //남아있는 레코드의 일괄 복사
//		for (l = i; l <= mid; l++)
//			sorted[k++] = list[l];
//	//배열 sorted[]의 리스트를 배열 list[]로 재복사
//	for (l = left; l <= right; l++)
//		list[l] = sorted[l];
//}
//void merge_sort(int list[], int left, int right) {
//	int mid;
//	if (left < right) {
//		mid = (left + right) / 2; //리스트의 균등 분할
//		merge_sort(list, left, mid); //부분 리스트 정렬
//		merge_sort(list, mid + 1, right); //부분 리스트 정렬
//		merge(list, left, mid, right) //합병
//	}
//}

//6. 기수정렬(radix sort) : 레코드를 비교하지 않고도 정렬하는 방법이다.
//기수정렬은 입력 데이터에 대해서 어떤 비교 연산도 실행하지 않고 데이터를 정렬할 수 있는 색다른 정렬기법이다.
//기수정렬이 추가적인 메모리를 필요로 하지만 기수정렬이 다른 정렬 기법보다 빠르기 때문에
//인기있는 정렬 기법 중의 하나이다. 
//단점 : 정렬할 수 있는 레코드 타입이 한정된다.

//십진수에서 각 자리수가 0에서 9까지 있으므로 10개의 버켓을 이용해서
//각 자릿수 값에 따라 버켓에 넣고 위에서 아래로 순차적으로 버켓안에 들어있는 숫자를 읽음으로써
//정렬된 숫자 리스트를 얻을 수 있다.
//비교 연산을 전혀 사용하지 않는다. 
//0에서 9까지의 번호가 매겨져있을때 1의 자릿수를 먼저 사용하고 같은 버켓을 사용하더라도 정렬이 가능해진다.
//키가 알파벳일 경우 26개의 버켓이 필요하다.

//큐에 대한 내용도 나옴
//#include <stdio.h>
//#include <malloc.h>
//#include <stdlib.h>
//
//typedef int element;	//요소의 타입
//typedef struct QueueNode { //큐의 노드의 타입
//	element item;
//	struct QueueNode* link;
//}QueueType;
//typedef struct {	//큐 ADT 구현
//	QueueNode* front, * rear;
//}QueueType;
//오류 함수
//void error(char* message) {
//	fprintf(stderr, "%s\n", message);
//	exit(1);
//}
//초기화 함수
//void int(QueueType* q) {
//	q->front = q->rear = 0;
//}
//공백 상태 검출 함수
//int is_empty(QueueType* q) {
//	return(q->front == NULL);
//}
//포화 상태 검출 함수
//int is_full(QueueType* q) {
//	return 0;
//}
//삽입함수
//void enqueue(QueueType* q, element item) {
//	QueueNode* temp = (QueueNode*)malloc(sizeof(QueueNode));
//	if (temp == NULL)
//		error("메모리를 할당할 수 없습니다.");
//	else {
//		temp->item = item;	//데이터 저장
//		temp->link = NULL;	//링크 필드를 NULL
//		is(is_empty(q)) {	//큐가 공백이면
//			q->front = temp;
//			q->rear = temp;
//		}
//	}
//}
//삭제 함수
//element dequeue(QueueType* q) {
//	QueueNode* temp = q->front;
//	element item;
//	if (is_empty(q))		//공백상태
//		error("큐가 비어있습니다.");
//	else {
//		item = temp->item;	//데이터를 꺼낸다.
//		q->front = q->front->link;	//front를 다음 노드를 가리키도록 한다.
//		if (q->front == NULL)	//공백상태
//			q->rear = NULL;
//		free(temp);		//동적메모리 해제
//		return item;	//데이터 반환
//	}
//}
//peek 함수
//element peek(QueueType* q) {
//	element item;
//	if (is_empty(q))
//		error("큐가 비어있습니다");
//	else {
//		item = q->front->item;	//데이터를 꺼낸다.
//		return item;			//데이터 반환
//	}
//}
//
//#define BUCEKTS 10
//#define DIGITS 4
//void radix_sort(int list[], int n) {
//	int i, b, d, factor = 1;
//	QueueType queues[BUCKETS];
//
//	for (b = 0; b < BUCKETS; b++)
//		init(&queues[b]); //큐들의 초기화
//	for (d = 0; d < DIGITS; d++) {
//		for (i = 0; i < n; i++)	//데이터들을 자리수에 따라 큐에 삽입
//			enqueue(&queues[(list[i] / factor) % 10], list[i]);
//		for (b = i = 0; b < BUCKETS; b++)	//버킷에서 꺼내어 list로 합친다.
//			while (!is_empty(&queues[b]))
//				list[i++] = dequeue(&queues[b]);
//		factor *= 10;	//그 다음 자리수로 간다.
//	}
//}
//
//#define MAX_SIZE 10000
//#define SWAP(x,y,t)((t)=(x), (x)=(y), (y)=(t))
//
//int list[MAX_SIZE];
//int n;
//
//void main() {
//	int i;
//	n = MAX_SIZE;
//	for (i = 0; i < n; i++)	//난수 생성 및 출력
//		list[i] = rand() % n;	//눈수 발생 범위 0~n
//	radix_sort(list, n);
//	for (i = 0; i < n; i++)
//		printf("%d\n", list[i]);
//}
